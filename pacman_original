The MIT License (MIT)

Copyright (c) 2014 Troy Shaw

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

gcc \
-std=c99 -Wall \
src/sound.c src/imageloader.c src/boardloader.c src/text.c \
src/game.c src/menu.c src/intermission.c \
src/board.c \
src/pacman.c src/ghost.c src/fruit.c src/pellet.c \
src/input.c src/window.c src/animation.c \
src/main.c \
-lSDL -lSDL_image -lSDL_ttf -lSDL_mixer -lSDL_gfx -lm \
-o game

# Generic Makefile (c) 2013 JÃ¶rg Seebohn
# Version 1.0
# Use it at your own risk !
# This Makefile depends on GNU make.


#########################
# Project Specific Part #
#########################
Project := game
Modes   := Debug #Release# - uncomment for release build too`

# Directory where target binary is created and object files
TargetDir         := bin
# Search Path For Include Files (InclPaths is included before mode specific InclPaths_MODE)
InclPaths         := .
InclPaths_Debug   :=
InclPaths_Release :=
# Defined values used by C preprocessor (Defines is included before mode specific Defines_MODE)
Defines           := 
Defines_Debug     := DEBUG
Defines_Release   := RELEASE
# List of Library Names (Libs is included before mode specific Libs_MODE)
Libs              := SDL SDL_image SDL_ttf SDL_mixer SDL_gfx
Libs_Debug        :=
Libs_Release      :=
# Search Paths for Libraries (LibPaths is included before mode specific LibPaths_MODE)
LibPaths          :=
LibPaths_Debug    :=
LibPaths_Release  :=
# Compiler specific flags (CFlags is included before mode specific CFlags_MODE)
CFlags            := -std=c99 -pedantic -Wall -Wextra -Wshadow -Wcast-qual -Wwrite-strings -Wstrict-prototypes -Wformat-nonliteral -Wformat-y2k
CFlags_Debug      := -g
CFlags_Release    := -O2
# Linker specific flags (LFlags is included before mode specific LFlags_MODE)
LFlags            :=
LFlags_Debug      := -g
LFlags_Release    := -O2

# Add Your Source file here
# Use $(wildcard dir/*.c) if you want to include files from directory 'dir'
Src := $(wildcard src/*.c)

##########################
# Compiler Specific Part #
##########################
IncPathFlag := -I
DefineFlag  := -D
LibraryFlag := -l
LibPathFlag := -L
# -MMD flag let gcc generate a dependency file "objectfilename.d" in addition to the object file "objectfilename.o"
CC          := gcc -MMD
LD          := gcc

#########################
# Generic Template Part #
#########################
all: $(Modes)

clean:
	@echo clean: $(Project)
	@echo rm -rf $(TargetDir)

test:	Release
	$(call TargetFilename,Release)

$(Modes:%=clean_%):
	@echo rm -rf $(TargetDir)/$(subst clean_,,$@)/$(Project)/

$(Modes:%=init_%):
	@mkdir -p $(TargetDir)/$(subst init_,,$@)/$(Project)

define TargetFilename
$(TargetDir)/$(Project)$(subst _Release,,_$(1))
endef

define ObjectFilename
$(TargetDir)/$(1)/$(Project)/$(subst /,!,$(2)).o
endef

define CompileObject
$(call ObjectFilename,$(1),$(2)): $(2)
	@echo cc: '$$<'
	@$$(CC_$(1)) -c -o '$$@' '$$<'
endef

define TargetTemplate
CC_$(1) := $(CC) $(Defines:%=$(DefineFlag)%) $$(Defines_$(1):%=$(DefineFlag)%) $(InclPaths:%=$(IncPathFlag)%) $$(InclPaths_$(1):%=$(IncPathFlag)%) $(CFlags) $$(CFlags_$(1))

Objects_$(1)  := $(foreach file,$(Src),$(call ObjectFilename,$(1),$(file)))

$(1):	init_$(1) $(call TargetFilename,$(1))

$(call TargetFilename,$(1)): $$(Objects_$(1))
	@echo ld: '$$@'
	@$(LD) $(LFlags) $$(LFlags_$(1)) -o '$$@' $$(^:%='%') $(LibPaths:%=$(LibPathFlag)%) $$(LibPaths_$(1):%=$(LibPathFlag)%) $(Libs:%=$(LibraryFlag)%) $$(Libs_$(1):%=$(LibraryFlag)%)

$(foreach file,$(Src),$(eval $(call CompileObject,$(1),$(file))))

# Include compiler generated dependency files
-include $$(Objects_$(1):.o=.d)

endef

$(foreach mode,$(Modes),$(eval $(call TargetTemplate,$(mode))))

Pacman
======

Faithful clone of the original 1980 Pacman game, written in C using SDL.

![Screenshot](http://i.imgur.com/XTNAsTa.png)

![Screenshot](http://i.imgur.com/4phwgId.png)
